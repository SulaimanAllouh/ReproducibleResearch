add2 <- function(x, y){
x + y
}
add2(3, 5)
add2 <- function(x, y){
x + y
}
above10 <- function(x){
use <- x > 10
x[use]
}
above <- function(x, n){
use <- x > n
x[use]
}
x <- 1:20
above(x, 12)
aboveDefualtValue <- function(x, n = 10){
use <- x > n
x[use]
}
x <- 1:20
aboveDefaultValue(x)
aboveDefualtValue(x)
columnmean <- function(y) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc){
means[i] <- mean(y[, i])
}
means
}
columnmean(airquality)
columnmean <- function(y, removeNA = TRUE) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc){
means[i] <- mean(y[, i], na.rm = removeNA)
}
means
}
columnmean(airquality)
columnmean(airquality, FALSE)
R.version.string
install.packages("swirl")
install.packages("swirl")
install.packages("swirl")
install.packages("swirl")
install.packages("swirl")
install.packages("swirl")
packageVersion("swirl")
library(swirl)
install_from_swirl("R Programming")
library(swirl)
packageVersion("swirl")
install_from_swirl("Regression Models")
install_from_swirl("Regression Models")
N <- 79
k <- 7
non_defective <- N - k
total_ways <- choose(N, 2)
non_defective_ways <- choose(non_defective, 2)
probability <- non_defective_ways / total_ways
print(probability)
factorial <- function(n) {
if (n == 0) return(1)
return(n * factorial(n - 1))
}
total_arrangements <- factorial(28) / (factorial(2) * factorial(3) * factorial(4) * factorial(1) * factorial(2) * factorial(4) * factorial(3) * factorial(1) * factorial(2) * factorial(1))
print(total_arrangements)
total_permutations <- factorial(30) / (factorial(2) * factorial(3) * factorial(4) * factorial(6) * factorial(2) * factorial(4) * factorial(3) * factorial(1) * factorial(2) * factorial(1))
print(total_permutations)
k <- 9
passwords_a <- 26^k
print(passwords_a)
total_b <- 52^k
no_capitals_b <- 26^k
one_capital_b <- choose(k, 1) * 26^(k-1) * 26
passwords_b <- total_b - no_capitals_b - one_capital_b
print(passwords_b)
total_c <- 62^k
no_capitals_c <- 36^k
no_digits_c <- 52^k
no_capitals_no_digits_c <- 26^k
passwords_c <- total_c - no_capitals_c - no_digits_c + no_capitals_no_digits_c
print(passwords_c)
population_size <- 10
characteristics <- c("Height (cm)", "Weight (kg)")
heights <- c(150, 152, 154, 156, 158, 160, 162, 164, 166, 168)
weights <- c(45, 46, 48, 50, 52, 54, 56, 58, 60, 100)
mean_weight <- mean(weights)
variance_weight <- var(weights)
std_dev_weight <- sd(weights)
print(mean_weight)
print(variance_weight)
print(std_dev_weight)
plot(heights, weights, xlab = "Height (cm)", ylab = "Weight (kg)", main = "Scatter plot of Height vs Weight")
covariance <- cov(heights, weights)
print(covariance)
correlation_coefficient <- cor(heights, weights)
print(correlation_coefficient)
model <- lm(weights ~ heights)
alpha <- coef(model)
beta <- coef(model)
print(alpha)
print(beta)
predicted_weight_170 <- alpha + beta * 170
print(predicted_weight_170)
predicted_weight_170 <- alpha[0] + beta[1] * 170
print(predicted_weight_170)
model <- lm(weights ~ heights)
alpha <- coef(model)
alpha
alpha[1]
5 * alpha[1]
model <- lm(weights ~ heights)
alpha = coef(model)[1]
beta = coef(model)[2]
print(alpha)
print(beta)
predicted_weight_170 <- alpha + beta * 170
print(predicted_weight_170)
library(AppliedPredictiveModeling)
library(AppliedPredictiveModeling)
setwd("A:/Dimensions.Development/ReproducibleResearch")
library(caret)
install.packages("caret")
install.packages("lubridate")
library(caret)
library(lubridate)
training_data_url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
testing_data_url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
training <- read.csv(training_data_url)
training <- training[, colSums(is.na(training)) < nrow(training) * 0.9]
training <- read.csv(training_data_url)
training <- read.csv(training_data_url)
testing <- read.csv(testing_data_url)
training <- training[, colSums(is.na(training)) < nrow(training) * 0.9]
testing <- testing[, colSums(is.na(testing)) < nrow(testing) * 0.9]
training <- training[, !grepl("^X|timestamp|window", names(training))]
testing <- testing[, !grepl("^X|timestamp|window", names(testing))]
training$classe <- as.factor(training$classe)
set.seed(123)
inTrain <- createDataPartition(training$classe, p = 0.7, list = FALSE)
train_set <- training[inTrain, ]
validation_set <- training[-inTrain, ]
set.seed(62433)
rf_model <- train(classe ~ ., data = train_set, method = "rf")
rf_model <- train(classe ~ ., data = train_set, method = "rf")
rf_model <- train(classe ~ ., data = train_set, method = "rf")
